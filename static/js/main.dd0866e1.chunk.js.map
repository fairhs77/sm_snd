{"version":3,"sources":["Canvas.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","canvasRef","useRef","draw","ctx","frameCount","clearRect","canvas","width","height","fillStyle","beginPath","min","max","Math","ceil","floor","coorx","ii","rr","random","diff","sin","myX","myY","myY1","rect","fill","useEffect","animationFrameId","context","current","getContext","render","window","requestAnimationFrame","cancelAnimationFrame","ref","App","className","hegith","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"gPA2EeA,EAvEA,SAAAC,GAEb,IAAMC,EAAYC,iBAAO,MAEnBC,EAAO,SAACC,EAAKC,GACjB,KAAGA,EAAa,IAAhB,CACAD,EAAIE,UAAU,EAAG,EAAGF,EAAIG,OAAOC,MAAOJ,EAAIG,OAAOE,QACjDL,EAAIM,UAAY,OAChBN,EAAIO,YAEJ,IAAIC,EAAI,EACJC,EAAI,EACRD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GAWjB,IATA,IAQII,EAAQ,EACHC,EAAG,GAAMA,EAAK,GAAIA,IAAM,CAC7BD,EAASC,EAAI,GACb,IAAIC,EAAKL,KAAKE,MAAMF,KAAKM,UAAYP,EAAMD,GAAOA,GAG9CS,EAAQP,KAAKQ,IAAIL,GAAUC,EAAGJ,KAAK,IAALA,KAAKQ,IAAe,GAAXjB,GAAiBc,GACxDI,EAdI,GAcW,GAAeN,EAC9BO,EAfI,GAeUH,EACdI,EAhBI,GAgBYJ,EAhBZ,GAiBGA,EAAQ,IACjBG,EAAM,GAlBA,GAoBIH,EAAO,IACjBI,EAAM,GAGVrB,EAAIsB,KAAKH,EAAKC,EAzBL,GAyBgBC,GAI1BrB,EAAIuB,SAwBP,OApBAC,qBAAU,WAER,IAGIC,EAFEC,EADS7B,EAAU8B,QACFC,WAAW,MAC9B3B,EAAa,EAWjB,OAPe,SAAT4B,IACJ5B,IACAF,EAAK2B,EAASzB,GACdwB,EAAmBK,OAAOC,sBAAsBF,GAElDA,GAEO,WACLC,OAAOE,qBAAqBP,MAE7B,CAAC1B,IAEG,oCAAQkC,IAAKpC,GAAeD,KC5DtBsC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACA,cAAC,EAAD,CAAQ/B,MAAQ,MAAMgC,OAAS,OAAOC,OAAS,WCKpCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dd0866e1.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react'\r\nimport \"./Canvas.css\"\r\n\r\n\r\nconst Canvas = props => {\r\n  \r\n  const canvasRef = useRef(null)\r\n  \r\n  const draw = (ctx, frameCount) => {\r\n    if(frameCount % 18) return;\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    ctx.fillStyle = 'pink'\r\n    ctx.beginPath()\r\n    \r\n    let min=0;\r\n    let max=5 ;\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n\r\n    let intv = 15\r\n    let bStart =70\r\n    let bmargin = 5\r\n\r\n    let ii =0;\r\n \r\n//    var diff = intv-10*Math.sin(frameCount*0.05)**2\r\n   // ctx.rect(bStart ,bStart-diff,intv, bStart+diff )\r\n    let coorx = 0 \r\n    for (let ii=15 ;  ii < 50; ii ++){     \r\n        coorx  = ii -15  \r\n        let rr = Math.floor(Math.random() * (max - min) + min);\r\n        //let r= Math.sin(ii* diff) - ii*diff * 4/(diff*Math.PI)*100 \r\n        \r\n        let diff = (Math.sin(coorx)) - ii*Math.sin(frameCount*0.3)**rr\r\n        let myX = bStart + (intv+bmargin)*coorx\r\n        let myY = bStart-(diff)\r\n        let myY1 = bStart +(diff)\r\n        if(bStart-(diff) < 0){\r\n          myY = 0\r\n        } \r\n        if(bStart +(diff) <0 ){\r\n          myY1= 0;\r\n        }\r\n\r\n      ctx.rect(myX ,myY, intv, myY1 )\r\n      \r\n    } \r\n        \r\n     ctx.fill()\r\n  \r\n  }\r\n  \r\n  useEffect(() => {\r\n    \r\n    const canvas = canvasRef.current\r\n    const context = canvas.getContext('2d')\r\n    let frameCount = 0\r\n    let animationFrameId\r\n    \r\n    //Our draw came here\r\n    const render = () => {\r\n      frameCount++\r\n      draw(context, frameCount)\r\n      animationFrameId = window.requestAnimationFrame(render)\r\n    }\r\n    render()\r\n    \r\n    return () => {\r\n      window.cancelAnimationFrame(animationFrameId)\r\n    }\r\n  }, [draw])\r\n  \r\n  return <canvas ref={canvasRef} {...props}/>\r\n}\r\n\r\nexport default Canvas","\r\nimport './App.css';\r\nimport Canvas from './Canvas'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n    <Canvas width = \"850\" hegith = \"2000\" border = \"1px\" ></Canvas>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}